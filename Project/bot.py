# -*- coding:utf-8-*-

import telebot
from telebot import types
from string import Template
import urllib.parse as up
import psycopg2
import time
import datetime
import gspread
import validate_email
import os

token=os.environ.get('TOKEN')
bot = telebot.TeleBot(str(token))

up.uses_netloc.append("postgres")
key = os.environ.get('password')
db = psycopg2.connect(f"dbname='rahycxvn' user='rahycxvn' host='hattie.db.elephantsql.com' password={key}")
cursor = db.cursor()
group_id = -your_group_id_in_telegram
user_data = {}

class User:
    def __init__(self, parentsname):
        self.parentsname = parentsname
        self.childname = ''
        self.birthday = ''
        self.mail = ''
        self.mobile = ''
        self.direction = ''
        self.skill = ''
        self.shiftatschool = ''
        self.category = ''
        self.description = ''

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    itembtn1 = types.KeyboardButton('–û –Ω–∞—Å ü™ê')
    itembtn2 = types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è üöÄ')
    markup.add(itembtn1, itembtn2)
    bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ " + message.from_user.first_name + ", —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?")
    bot.send_sticker(message.chat.id, r'CAACAgIAAxkBAAED3IRiApWU-mTOpPRoVp7a0c9Lg5UYvQACAQEAAladvQoivp8OuMLmNCME', reply_markup=markup)

@bot.message_handler(regexp='–û –Ω–∞—Å ü™ê')
@bot.message_handler(commands=['info'])
def send_about(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    itembtn1 = types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è üöÄ')
    markup.add(itembtn1)
    bot.send_message(message.chat.id, "*–Ø - –±–æ—Ç –î–Æ–¢–¢–ê.*\n\n*–ù–∞—à —Å–∞–π—Ç* https://robo74.ru/\n*–ú—ã –Ω–∞ telegram* https://t.me/tehkids74 \n*–ú—ã –Ω–∞ instagrame* https://www.instagram.com/tehkids74/ \n*–ù–∞—à –≤–∏–¥–µ–æ–∫–∞–Ω–∞–ª* https://www.youtube.com/channel/UC3P6PnoiXT6a4g6RHQTYLSA \n*–ú—ã –Ω–∞ twitter* https://twitter.com/tehkids74 \n*–ú–´ –Ω–∞ facebook* https://www.facebook.com/dutt74/ \n*–ú—ã –Ω–∞ –î–∑–µ–Ω–µ* https://zen.yandex.ru/tehkids \n*–ú—ã –Ω–∞ vk* https://vk.com/tehkids74 \n*–ü—Ä–µ—Å—Å —Å–ª—É–∂–±–∞* media@robo74.ru \n*–ù–∞—à –µ–º–µ–π–ª* pismadir@robo74.ru \n\n*–ö–æ–Ω—Ç–∞–∫—Ç—ã:*\n454031, –†–æ—Å—Å–∏—è,\n–≥. –ß–µ–ª—è–±–∏–Ω—Å–∫,\n—É–ª. –ß–µ—Ä–∫–∞—Å—Å–∫–∞—è, –¥. 1–∞\n—É–ª. –û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ, –¥. 50\n\n +7 (900) 029-50-10 *–î–Æ–¢–¢*\n +7 (904) 808-60-10 *–ö–≤–∞–Ω—Ç–æ—Ä–∏—É–º –ß–µ–ª—è–±–∏–Ω—Å–∫*\n +7 (351) 945-22-01 *–ö–≤–∞–Ω—Ç–æ—Ä–∏—É–º –ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫*\n +7 (982) 277-46-61 *IT-–ö—É–± –Æ–∂–Ω–æ—É—Ä–∞–ª—å—Å–∫*\n +7 (922) 713-09-83 *IT-–ö—É–± –°–∞—Ç–∫–∞*", reply_markup=markup, parse_mode= "Markdown")
    bot.send_message(message.chat.id, "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å /reg –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É üëá")


@bot.message_handler(regexp='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è üöÄ')
@bot.message_handler(commands=['reg'])
def user_reg(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    user_id = message.from_user.id
    sql = f"SELECT * FROM users WHERE id = {message.from_user.id}"
    cursor.execute(sql)
    existsUser = cursor.fetchone()

    if (existsUser == None):
        markup = types.ReplyKeyboardRemove(selective=False)
        keyboard = types.InlineKeyboardMarkup()
        button_first = types.InlineKeyboardButton(text="–°–æ–≥–ª–∞—Å–µ–Ω ‚úÖ", callback_data="accept")
        keyboard.add(button_first)
        bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –±–µ–∑ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", reply_markup=markup)
        bot.send_message(message.chat.id, "–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è, –æ–∂–∏–¥–∞–π—Ç–µ.")
        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        itembtn1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É ‚ùå')
        markup1.add(itembtn1)
        bot.send_sticker(message.chat.id, r'CAACAgIAAxkBAAED3IxiApcnKCWLGm0N0uCA8phrMN844gACSwIAAladvQpiUEXQUPpxnCME', reply_markup=markup1)

@bot.callback_query_handler(func=lambda call: call.data in ["accept"])
@bot.message_handler(regexp='–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ ü™Ñ')
@bot.message_handler(commands=['correct'])
def user_reg2(call):
    markup = types.ReplyKeyboardRemove(selective=False)
    msg = bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è", reply_markup=markup)
    bot.register_next_step_handler(msg, process_parentsname_step)
    
def process_parentsname_step(message):
    user_id = message.from_user.id
    user_data[user_id] = User(message.text)
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –æ–±—É—á–∞—é—â–µ–≥–æ—Å—è")
    bot.register_next_step_handler(msg, process_childname_step)

def process_childname_step(message):
    user_id = message.from_user.id
    user = user_data[user_id]
    user.childname = message.text
    msg = bot.send_message(message.chat.id, "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–∞—é—â–µ–≥–æ—Å—è (–¥–¥.–º–º.–≥–≥–≥–≥)")
    bot.register_next_step_handler(msg, process_dateofbirth_step)

def process_dateofbirth_step(message):
    user_id = message.from_user.id
    user = user_data[user_id]
    user.birthday = message.text

    date = message.text
    try:
        valid_date = time.strptime(date, '%d.%m.%Y')
        print(valid_date)
        msg = bot.send_message(message.chat.id, "–í–∞—à–∞ –ø–æ—á—Ç–∞")
        bot.register_next_step_handler(msg, process_mail_step)
    except ValueError:
        bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–¥–¥.–º–º.–≥–≥–≥–≥), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        bot.send_sticker(message.chat.id, r'CAACAgIAAxkBAAED3IZiApXO9J5lnSwElgcGxXHAYC5N-QAC-QADVp29CpVlbqsqKxs2IwQ')
        msg = bot.send_message(message.chat.id, "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–∞—é—â–µ–≥–æ—Å—è (–¥–¥.–º–º.–≥–≥–≥–≥)")
        bot.register_next_step_handler(msg, process_dateofbirth_step)

def process_mail_step(message):
    user_id = message.from_user.id
    user = user_data[user_id]
    user.mail = message.text

    email = validate_email.validate_email(message.text)
    if email == True:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        bot.register_next_step_handler(msg, process_mobile_step)
    else:
        bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        bot.send_sticker(message.chat.id, r'CAACAgIAAxkBAAED3IZiApXO9J5lnSwElgcGxXHAYC5N-QAC-QADVp29CpVlbqsqKxs2IwQ')
        msg = bot.send_message(message.chat.id, "–í–∞—à–∞ –ø–æ—á—Ç–∞")
        bot.register_next_step_handler(msg, process_mail_step)

def process_mobile_step(message):
    user_id = message.from_user.id
    user = user_data[user_id]
    user.mobile = message.text

    if len(str(message.text)) == 11 and int(message.text) == int(message.text): 
         markup_direction = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
         itembtn1 = types.KeyboardButton('–ê–≤–∏–∞–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (10-16 –ª–µ—Ç)')
         itembtn2 = types.KeyboardButton('–ê–≤—Ç–æ–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (10-16 –ª–µ—Ç)')
         itembtn3 = types.KeyboardButton('–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –±–∞–∑–µ Arduino (12-16 –ª–µ—Ç)')
         itembtn4 = types.KeyboardButton('–°—É–¥–æ–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (10-16 –ª–µ—Ç)')
         itembtn5 = types.KeyboardButton('–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ (14-17 –ª–µ—Ç)')
         itembtn6 = types.KeyboardButton('–•–∞–π—Ç–µ–∫-—Ü–µ—Ö (12-16 –ª–µ—Ç)')
         itembtn7 = types.KeyboardButton('*Baby-—Ç–µ—Ö–Ω–∏–∫ (–≤–Ω–µ–±—é–¥–∂–µ—Ç; 3-7 –ª–µ—Ç)')
         itembtn8 = types.KeyboardButton('*–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Scratch (–≤–Ω–µ–±—é–¥–∂–µ—Ç; 8-12 –ª–µ—Ç)')
         itembtn9 = types.KeyboardButton('*–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω (–≤–Ω–µ–±—é–¥–∂–µ—Ç; 12-16 –ª–µ—Ç)')
         itembtn10 = types.KeyboardButton('*–£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞ (–≤–Ω–µ–±—é–¥–∂–µ—Ç; 8-14 –ª–µ—Ç)')
         itembtn11 = types.KeyboardButton('*–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ø–æ–¥ Android (–≤–Ω–µ–±—é–¥–∂–µ—Ç; 12-16 –ª–µ—Ç)')
         itembtn12 = types.KeyboardButton('*3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤–Ω–µ–±—é–¥–∂–µ—Ç; 11-16 –ª–µ—Ç)')
#         itembtn13 = types.KeyboardButton('–î—Ä—É–≥–æ–µ')
         markup_direction.add(itembtn1, itembtn2, itembtn3, itembtn4, itembtn5, itembtn6, itembtn7, itembtn8, itembtn9, itembtn10, itembtn11, itembtn12) #, itembtn13

         msg = bot.send_message(message.chat.id, "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è", reply_markup=markup_direction)
         bot.register_next_step_handler(msg, process_direction_step)

    elif len(message.text) == 12:
         markup_direction = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
         itembtn1 = types.KeyboardButton('–ê–≤–∏–∞–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (10-16 –ª–µ—Ç)')
         itembtn2 = types.KeyboardButton('–ê–≤—Ç–æ–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (10-16 –ª–µ—Ç)')
         itembtn3 = types.KeyboardButton('–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –±–∞–∑–µ Arduino (12-16 –ª–µ—Ç)')
         itembtn4 = types.KeyboardButton('–°—É–¥–æ–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (10-16 –ª–µ—Ç)')
         itembtn5 = types.KeyboardButton('–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ (14-17 –ª–µ—Ç)')
         itembtn6 = types.KeyboardButton('–•–∞–π—Ç–µ–∫-—Ü–µ—Ö (12-16 –ª–µ—Ç)')
         itembtn7 = types.KeyboardButton('*Baby-—Ç–µ—Ö–Ω–∏–∫ (–≤–Ω–µ–±—é–¥–∂–µ—Ç; 3-7 –ª–µ—Ç)')
         itembtn8 = types.KeyboardButton('*–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Scratch (–≤–Ω–µ–±—é–¥–∂–µ—Ç; 8-12 –ª–µ—Ç)')
         itembtn9 = types.KeyboardButton('*–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω (–≤–Ω–µ–±—é–¥–∂–µ—Ç; 12-16 –ª–µ—Ç)')
         itembtn10 = types.KeyboardButton('*–£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞ (–≤–Ω–µ–±—é–¥–∂–µ—Ç; 8-14 –ª–µ—Ç)')
         itembtn11 = types.KeyboardButton('*–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ø–æ–¥ Android (–≤–Ω–µ–±—é–¥–∂–µ—Ç; 12-16 –ª–µ—Ç)')
         itembtn12 = types.KeyboardButton('*3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤–Ω–µ–±—é–¥–∂–µ—Ç; 11-16 –ª–µ—Ç)')
#         itembtn13 = types.KeyboardButton('–î—Ä—É–≥–æ–µ')
         markup_direction.add(itembtn1, itembtn2, itembtn3, itembtn4, itembtn5, itembtn6, itembtn7, itembtn8, itembtn9, itembtn10, itembtn11, itembtn12) #, itembtn13

         msg = bot.send_message(message.chat.id, "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è", reply_markup=markup_direction)
         bot.register_next_step_handler(msg, process_direction_step)
    
    else:
        bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        bot.send_sticker(message.chat.id, r'CAACAgIAAxkBAAED3IZiApXO9J5lnSwElgcGxXHAYC5N-QAC-QADVp29CpVlbqsqKxs2IwQ')
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        bot.register_next_step_handler(msg, process_mobile_step)

def process_direction_step(message):
    markup_skill = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    itembtn1 = types.KeyboardButton('–í–≤–æ–¥–Ω—ã–π –º–æ–¥—É–ª—å')
    itembtn2 = types.KeyboardButton('–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–æ–¥—É–ª—å - —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –ø—Ä–æ–µ–∫—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã')
    markup_skill.add(itembtn1, itembtn2)

    user_id = message.from_user.id
    user = user_data[user_id]
    user.direction = message.text
    msg = bot.send_message(message.chat.id, "–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è", reply_markup=markup_skill)
    bot.register_next_step_handler(msg, process_skill_step)

def process_skill_step(message):
    markup_shiftatschool = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    itembtn1 = types.KeyboardButton('1 —Å–º–µ–Ω–∞')
    itembtn2 = types.KeyboardButton('2 —Å–º–µ–Ω–∞')
    markup_shiftatschool.add(itembtn1, itembtn2)

    user_id = message.from_user.id
    user = user_data[user_id]
    user.skill = message.text
    msg = bot.send_message(message.chat.id, "–°–º–µ–Ω–∞ –≤ —à–∫–æ–ª–µ", reply_markup=markup_shiftatschool)
    bot.register_next_step_handler(msg, process_shiftatschool_step)

def process_shiftatschool_step(message):
    markup_category = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    itembtn1 = types.KeyboardButton('–ú–Ω–æ–≥–æ–¥–µ—Ç–Ω–∞—è —Å–µ–º—å—è')
    itembtn2 = types.KeyboardButton('–†–µ–±–µ–Ω–æ–∫-–∏–Ω–≤–∞–ª–∏–¥')
    itembtn3 = types.KeyboardButton('–ù–µ–ø–æ–ª–Ω–∞—è —Å–µ–º—å—è')
    markup_category.add(itembtn1, itembtn2, itembtn3)

    user_id = message.from_user.id
    user = user_data[user_id]
    user.shiftatschool = message.text
    msg = bot.send_message(message.chat.id, "C–æ—Ü–∏–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—É—á–∞—é—â–µ–≥–æ—Å—è", reply_markup=markup_category)
    bot.register_next_step_handler(msg, process_category_step)

def process_category_step(message):
    user_id = message.from_user.id
    user = user_data[user_id]
    user.category = message.text
    markup = types.ReplyKeyboardRemove(selective=False)
    msg = bot.send_message(message.chat.id, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ", reply_markup=markup)
    bot.register_next_step_handler(msg, process_description_step)

#–¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
today = datetime.datetime.today()
data_reg = today.strftime("%d.%m.%Y")

def process_description_step(message):
    user_id = message.from_user.id
    user = user_data[user_id]
    user.description = message.text
    
    bot.send_message(message.chat.id, getRegData(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username), parse_mode="HTML")

    markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    itembtn1 = types.KeyboardButton('–î–∞')
    itembtn2 = types.KeyboardButton('–ù–µ—Ç')
    markup1.add(itembtn1, itembtn2)
    msg = bot.send_message(message.chat.id,"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –≤–µ—Ä–Ω–æ?", reply_markup=markup1)
    bot.register_next_step_handler(msg, process_final_step)

def process_final_step(message):
    user_id = message.from_user.id
    user = user_data[user_id]
    user.agreement = message.text

    if message.text == "–î–∞":
        sql = f"INSERT INTO users (id, first_name, last_name, telegram_user_id, user_data_reg) VALUES (%s, %s, %s, '@{message.chat.username}', '{data_reg}')"
        val = (user_id, message.from_user.first_name, message.from_user.last_name)
        cursor.execute(sql, val)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–∫–∏
        sql = f"INSERT INTO regs (id, parentsname, childname, birthday, mail, mobile, direction, skill, shiftatschool, category, description) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"
        val = (user_id, user.parentsname, user.childname, user.birthday, user.mail, user.mobile, user.direction, user.skill, user.shiftatschool, user.category, user.description)
        cursor.execute(sql, val)
        db.commit()

        #–¥–æ–∑–∞–ø–∏—Å—å google sheets
        CREDENTIALS_FILE = 'googlesheets/botdutttelegram-9c0cba3e1c28.json'
        gc = gspread.service_account(filename = CREDENTIALS_FILE)
        sh = gc.open_by_key('1YH1yopZtn1HsdXNwCzijYIDiLLng5sGh-hDajm7sTg0')
        worksheet = sh.sheet1
        transaction = [user_id, user.parentsname, user.childname, user.birthday, user.mail, user.mobile, user.direction, user.skill, user.shiftatschool, user.category, user.description]
        worksheet.append_row(transaction) # –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É, –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –≤–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤–Ω–∏–∑.

        bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã!")
        bot.send_sticker(message.chat.id, r'CAACAgIAAxkBAAED3IhiApaIZw6bpoVMF8tbOVWwtOayKwAC_gADVp29CtoEYTAu-df_IwQ')
        bot.send_message(group_id, getRegData(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username), parse_mode="HTML")
        
        cursor.execute(f"SELECT id FROM survey WHERE id = '{message.from_user.id}'")
        result = cursor.fetchone()
        if result is None:
            markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            itembtn1 = types.KeyboardButton('–û—Ü–µ–Ω–∏—Ç—å')
            itembtn2 = types.KeyboardButton('–ù–µ —Å–µ–π—á–∞—Å')
            markup1.add(itembtn1, itembtn2)
            msg = bot.send_message(message.chat.id, '–ù–µ –∂–µ–ª–∞–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞?', reply_markup=markup1)
            bot.register_next_step_handler(msg, process_survey_step)
        else:
            markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            itembtn1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É ‚ùå')
            markup1.add(itembtn1)
            bot.send_message(message.chat.id, "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=markup1)
        
    elif message.text == "–ù–µ—Ç":
        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        itembtn1 = types.KeyboardButton('–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ ü™Ñ')
        markup1.add(itembtn1)
        bot.send_message(message.chat.id, "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /correct –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá", reply_markup=markup1)

def getRegData(user, title, name):
    t = Template("$title <b>$name</b> \n–§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: <b>$parentsname</b>\n–§–ò–û –æ–±—É—á–∞—é—â–µ–≥–æ—Å—è: <b>$childname</b>\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–∞—é—â–µ–≥–æ—Å—è: <b>$birthday</b>\n–ü–æ—á—Ç–∞: <b>$mail</b> \n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>$mobile</b> \n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è: <b>$direction</b>\n–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: <b>$skill</b> \n–°–º–µ–Ω–∞ –≤ —à–∫–æ–ª–µ: <b>$shiftatschool</b> \nC–æ—Ü–∏–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—É—á–∞—é—â–µ–≥–æ—Å—è: <b>$category</b> \n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ: <b>$description</b>")
    return t.substitute({
        'title': title,
        'name' : name,
        'parentsname' : user.parentsname,
        'childname' : user.childname,
        'birthday' : user.birthday,
        'mail' : user.mail,
        'mobile' : user.mobile,
        'direction' : user.direction,
        'skill' : user.skill,
        'shiftatschool' : user.shiftatschool,
        'category' : user.category,
        'description' : user.description
    })

@bot.message_handler(regexp='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É ‚ùå')
@bot.message_handler(commands=['cancellation'])
def send_welcome(message):
    markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    itembtn1 = types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è üöÄ')
    markup1.add(itembtn1)

    cursor.execute(f"SELECT id FROM users WHERE id = '{message.from_user.id}'")
    result = cursor.fetchone()
    if result is None:
        bot.send_message(message.chat.id,'–£ –Ω–∞—Å –∏ —Ç–∞–∫ –Ω–µ—Ç –í–∞—à–µ–π –∑–∞—è–≤–∫–∏! –ù–∞–ø–∏—à–∏—Ç–µ /reg –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞—è–≤–∫—É', reply_markup=markup1)
        bot.send_sticker(message.chat.id, r'CAACAgIAAxkBAAED3IZiApXO9J5lnSwElgcGxXHAYC5N-QAC-QADVp29CpVlbqsqKxs2IwQ')
    else:
        result_scnd = []
        cursor.execute(f"SELECT id, parentsname, childname, birthday, mail, mobile, direction, skill, shiftatschool, category, description  FROM regs WHERE id = '{message.from_user.id}'")
        result1 = cursor.fetchall()
        for row in result1:
            for x in row:
                result_scnd.append(str(x))     

        #—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ google sheet
        cursor.execute("SELECT id FROM users")
        users_list = []
        massive_big = cursor.fetchall()
        for row in massive_big:
            for x in row:
                users_list.append(str(x))
        print(users_list)
        print(result_scnd)
        CREDENTIALS_FILE = 'googlesheets/botdutttelegram-9c0cba3e1c28.json'
        gc = gspread.service_account(filename = CREDENTIALS_FILE)
        sh = gc.open_by_key('1YH1yopZtn1HsdXNwCzijYIDiLLng5sGh-hDajm7sTg0')
        worksheet = sh.sheet1
        worksheet.delete_rows(int(users_list.index(f'{message.from_user.id}'))+2)

        #—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ postgresql
        cursor.execute(f"DELETE FROM users WHERE id = '{message.from_user.id}'")
        cursor.execute(f"DELETE FROM regs WHERE id = '{message.from_user.id}'")
        db.commit()
     
        bot.send_message(message.chat.id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /reg –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', reply_markup=markup1)
        bot.send_sticker(message.chat.id, r'CAACAgIAAxkBAAED3IpiApb0iuxW6WxtRdM_Hu1z3IoIDwACSQIAAladvQoqlwydCFMhDiME')
        
        bot.send_message(group_id, f'–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>"{result_scnd[2]}"</b> (@{message.chat.username}) —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º <b>{message.from_user.id}</b> –æ—Ç–º–µ–Ω–µ–Ω–∞', parse_mode="HTML")
        
def process_survey_step(message):
    if message.text == '–û—Ü–µ–Ω–∏—Ç—å':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        itembtn1 = types.KeyboardButton('‚≠êÔ∏è')
        itembtn2 = types.KeyboardButton('‚≠êÔ∏è‚≠êÔ∏è')
        itembtn3 = types.KeyboardButton('‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è')
        itembtn4 = types.KeyboardButton('‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è')
        itembtn5 = types.KeyboardButton('‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è')
        markup.add(itembtn1, itembtn2, itembtn3, itembtn4, itembtn5)
        msg = bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞–≤—å—Ç–µ —á–∞—Ç-–±–æ—Ç—É –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5', reply_markup=markup)
        bot.register_next_step_handler(msg, process_survey1_step)
    elif message.text == '–ù–µ —Å–µ–π—á–∞—Å':
        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        itembtn1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É ‚ùå')
        markup1.add(itembtn1)
        bot.send_message(message.chat.id, "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=markup1)
    
def process_survey1_step(message):
    user_id = message.from_user.id
    user = user_data[user_id]
    if message.text == '‚≠êÔ∏è':
        user.survey_grade = 1
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(message.chat.id, '–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ —á–∞—Ç-–±–æ—Ç–∞', reply_markup=markup)
        bot.register_next_step_handler(msg, process_survey3_step)
    elif message.text == '‚≠êÔ∏è‚≠êÔ∏è':
        user.survey_grade = 2
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(message.chat.id, '–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ —á–∞—Ç-–±–æ—Ç–∞', reply_markup=markup)
        bot.register_next_step_handler(msg, process_survey3_step)
    elif message.text == '‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è':
        user.survey_grade = 3
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(message.chat.id, '–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ —á–∞—Ç-–±–æ—Ç–∞', reply_markup=markup)
        bot.register_next_step_handler(msg, process_survey3_step)
    elif message.text == '‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è':
        user.survey_grade = 4
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(message.chat.id, '–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ —á–∞—Ç-–±–æ—Ç–∞', reply_markup=markup)
        bot.register_next_step_handler(msg, process_survey3_step)
    elif message.text == '‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è':
        user.survey_grade = 5
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(message.chat.id, '–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ —á–∞—Ç-–±–æ—Ç–∞', reply_markup=markup)
        bot.register_next_step_handler(msg, process_survey3_step)
    else:
        bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –æ—Ü–µ–Ω–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        bot.send_sticker(message.chat.id, r'CAACAgIAAxkBAAED3IZiApXO9J5lnSwElgcGxXHAYC5N-QAC-QADVp29CpVlbqsqKxs2IwQ')
        msg = bot.send_message(message.chat.id, "–ü–æ—Å—Ç–∞–≤—å—Ç–µ —á–∞—Ç-–±–æ—Ç—É –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 (–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏)")
        bot.register_next_step_handler(msg, process_survey1_step)

def process_survey3_step(message):
    user_id = message.from_user.id
    user = user_data[user_id]
    user.survey_comment = message.text
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!')
    sql = f"INSERT INTO survey (id, grade, comment) VALUES ('{message.from_user.id}', %s, %s)"
    val = (user.survey_grade, user.survey_comment)
    cursor.execute(sql, val)
    db.commit()
    markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    itembtn1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É ‚ùå')
    markup1.add(itembtn1)
    bot.send_message(message.chat.id, "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=markup1)
        
        
# Enable saving next step handlers to file "./.handlers-saves/step.save".
# Delay=2 means that after any change in next step handlers (e.g. calling register_next_step_handler())
# saving will hapen after delay 2 seconds.
bot.enable_save_next_step_handlers(delay=2)

# Load next_step_handlers from save file (default "./.handlers-saves/step.save")
# WARNING It will work only if enable_save_next_step_handlers was called!
bot.load_next_step_handlers()

if __name__ == '__main__':
    bot.polling(none_stop=True)
